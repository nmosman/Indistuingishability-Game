{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","RawHTML","props","dangerouslySetInnerHTML","__html","html","current_round","generate_key","rounds","flipCoin","document","querySelector","showAnswers","className","App","handleToUpdate","bind","state","num_of_rounds","game_type","carry","digits","keyLength","op","scheme","this","setState","basename","exact","path","render","component","Info","Quiz","children","React","Component","GamePage","submitGuess","changeGuess","submitMessages","updateMessages","isValidMessage","refreshGame","msg0","msg1","selectedMsg","wins","guess","b","c","warningText","key","buttonText","console","log","alert","refs","m1","value","m2","kk","style","color","background","bb","e","msg_list","formatKey","perform_op","msg","length","i","target","split","map","x","name","carryText","rulesText","class","Container","fluid","Row","Col","xs","ref","id","type","onChange","Button","onClick","Form","Group","Control","placeholder","onKeyPress","to","marginLeft","Settings","handleChange","val","checked","body","classList","remove","Label","Text","for","add","Home","onSelect","eventKey","marginTop","Dropdown","Toggle","variant","Menu","Item","href","QuestionImage","imgRef","createRef","prevProps","prevState","current","img","src","timer","setTimeout","clearTimeout","alt","QuizProgress","currentQuestion","questionLength","Results","correct","toFixed","startOver","updateAnswer","checkAnswer","nextQuestion","getResults","inProgress","questions","question","options","option","feedback","moreUrl","answerValue","stateToUpdate","answerCorrect","JSON","parse","radioRef","reset","forEach","item","index","questionsToUpdate","aria-live","disabled","htmlFor","Fragment","numbers","push","Math","floor","random","pow","resString","round","message","res","result","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.eb577379.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Button from 'react-bootstrap/Button'\r\nimport SplitButton from 'react-bootstrap/SplitButton'\r\nimport ToggleButton from 'react-bootstrap/ToggleButton'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport Form from 'react-bootstrap/Form'\nimport ReactDOM from \"react-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nconst RawHTML = (props) => <span dangerouslySetInnerHTML={{__html: props.html}}></span>;\r\nvar key = generate_key(2,1)\r\nvar msgs = [generate_key(2,1), generate_key(2,1)] \r\n\r\nvar selectedGame = 1;\r\n\n\n\n//global game states (kinda bad practice here but will be refactored in the near future)\nvar score;\nvar current_round = 1;\nvar rounds = 1;\nvar wins = 0;\nvar guess = -999;\nvar coinRes = flipCoin()\nvar inputMsgs = []\nvar cipherText = \"\"\n\r\n//Store the container for rendering our website\r\nconst appRoot = document.querySelector('.appRoot');\r\n\r\nfunction refreshPage(){ \n    window.location.reload(); \n\n\n}\n\n\r\n// Component for main component\r\n\r\n//Show answers once guess is submitted\r\nfunction showAnswers() {\r\n  document.querySelector(\"#k\").className = \".spoiled\"\r\n  document.querySelector(\"#b\").className = \".spoiled\"\n  \r\n\r\n}\n\nfunction hideAnswers() {\n  document.querySelector(\"#k\").className = \".spoiler\"\n  document.querySelector(\"#b\").className = \".spoiler\"\n\n}\r\n\r\nfunction submitButton () {\r\n  showAnswers();\r\n}\r\n//TODO add a common component for all pages\r\nclass App extends React.Component {\r\n\tconstructor(props){\r\n\tsuper(props);\r\n\tvar handleToUpdate = this.handleToUpdate.bind(this)\r\n\tthis.state = {\r\n\t\t//defaults \r\n\t\t//for game types \r\n\t\t//1 - Scheme 1 - Addition with two digits and no carry \r\n\t\t//2 - Scheme 2 - Addition with two digits and carry \r\n\t\t//3\r\n\t\t//4 - Custom defined rule set \r\n\t\t\tnum_of_rounds: 5,\r\n\t\t\tgame_type: 1,\r\n\t\t\tcarry: 0,\r\n\t\t\tdigits: 2,\r\n\t\t\tkeyLength: 3,\r\n\t\t\top: \"+\",\r\n\t\t\tscheme: \"Scheme 1\"\r\n\t\t\t\r\n\t};\r\n}\r\n\r\nhandleToUpdate(state){\r\n\t\tthis.setState(state)\r\n}\r\n  render() {\r\n\t  var handleToUpdate = this.handleToUpdate;\r\n    return (\r\n      <div>\r\n          <div className=\"App\">\r\n     <h2> Indistinguishability game </h2>\r\n\t\r\n      <header className=\"App-header\">\r\n\r\n\r\n\t\t<Router basename=\"/\">\r\n\t\t  <Switch>\r\n\t\t  <Route exact path=\"/\" render={props =>  (<Home {...props} state ={this.state} handleToUpdate = {handleToUpdate.bind(this)} />) } />\r\n          <Route path=\"/gamepage\"  render={props =>  (<GamePage {...props} state ={this.state} handleToUpdate = {handleToUpdate.bind(this)} />) }/>\r\n          <Route path=\"/settings\" render={props =>  (<Settings {...props} state ={this.state} handleToUpdate = {handleToUpdate.bind(this)} />) }/>\r\n          <Route path=\"/info\" component = {Info} />\r\n\t\t  <Route path=\"/quiz\" component = {Quiz} /> \r\n\r\n           </Switch>\r\n\t\t\t</Router>\r\n        {/* Render active Route or indexRoute */}\r\n        {this.props.children}\r\n\t\t\r\n        </header>\r\n      </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\t\r\nfunction getGameType(gameType, state){\r\n\tvar rulesText = \"Default rules\";\r\n\tswitch(gameType){\r\n\t\tcase \"Scheme 1\":\r\n\t\t\trulesText = \" This is 1 digit with no carry\";\r\n\t\t\tbreak;\r\n\t\tcase \"Scheme 2\":\r\n\t\t\trulesText = \" This is Scheme 2\";\r\n\t\t\tbreak;\r\n\t\tcase \"Scheme 3\":\r\n\t\t\t rulesText = \" This is Scheme 3\";\r\n\t\t\tbreak;\r\n\t\tcase \"Scheme 4\":\r\n\t\t\trulesText = \" This is Scheme 4\";\r\n\t\t\tbreak;\r\n\t\tcase \"Custom Scheme\":\r\n\t\t\trulesText = \"<b>This is a Custom Scheme</b><br>\";\r\n\t\t\trulesText += \"<small>From the user defined inputs, we have the following rules:<br>\";\r\n\t\t\trulesText += \"Number of Rounds: \" + state.num_of_rounds + \" <br> \";\r\n\t\t\trulesText += \"Number of Digits in Keys/Messages: \" + state.digits + \" <br> \";\r\n\t\t\trulesText += \"<small>Number of Elements per Key/Message: \" + state.keyLength + \" <br> \";\r\n\t\t\trulesText += \"<small>Arithmetic Operation for Encryption Scheme: \" + state.op + \" <br> \";\r\n\t\t\trulesText += \"Carry for Addition: \" + state.carry + \" </small><br> \";\r\n\t\t\tbreak;\r\n\t\t\r\n\t}\r\n\t\r\n\treturn rulesText;\r\n}\r\nclass GamePage extends React.Component{\r\nconstructor(props){\r\n\tsuper(props);\r\n\tthis.submitGuess = this.submitGuess.bind(this) \r\n\tthis.changeGuess = this.changeGuess.bind(this) \n\tthis.submitMessages = this.submitMessages.bind(this)\n\tthis.updateMessages = this.updateMessages.bind(this)\n\tthis.isValidMessage = this.isValidMessage.bind(this)\n\tthis.refreshGame = this.refreshGame.bind(this)\n\t\n\trounds = this.props.state.num_of_rounds\n\t\n\tthis.state = {\n\t\t\tmsg0: \"\",\n\t\t\tmsg1: \"\",\n\t\t\tselectedMsg: \"\",\n\t\t\tcurrent_round: 1,\n\t\t\twins: 0,\n\t\t\tguess: -999,\n\t\t\tb: flipCoin(), \n\t\t\tc: \"\",\n\t\t\twarningText: \"\",\n\t\t\tkey: \"\",\n\t\t\tbuttonText : \"Next Round\"\n\t\t\t\n\t}\n\t\n\tswitch(this.props.state.scheme){\n\t\t\t \tcase \"Scheme 1\":\n\t\t\t\t\tthis.state.keyLength = 2;\n\t\t\t\t\tthis.state.digits = 1;\n\t\t\t\t\tthis.state.op = \"+\";\n\t\t\t\t\tthis.state.carry = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Scheme 2\":\n\t\t\t\t\tthis.state.keyLength = 3;\n\t\t\t\t\tthis.state.digits = 1;\n\t\t\t\t\tthis.state.op = \"+\";\n\t\t\t\t\tthis.state.carry = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Scheme 3\":\n\t\t\t\t\tthis.state.keyLength = 5;\n\t\t\t\t\tthis.state.digits = 2;\n\t\t\t\t\tthis.state.op = \"+\";\n\t\t\t\t\tthis.state.carry = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Scheme 4\":\n\t\t\t\t\n\t\t\t\t\tthis.state.keyLength = 7;\n\t\t\t\t\tthis.state.digits = 2;\n\t\t\t\t\tthis.state.op = \"+\";\n\t\t\t\t\tthis.state.carry = 0;\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Custom Scheme\":\n\t\t\t\t\tthis.state.keyLength = this.props.state.keyLength;  \n\t\t\t\t\tthis.state.rounds = this.props.state.rounds;\n\t\t\t\t\tthis.state.digits = this.props.state.digits;\n\t\t\t\t\tthis.state.carry = this.props.state.carry;\n\t\t\t\t\tthis.state.op = this.props.state.op \n\t\t\t }\n\t\n\tthis.state.key = generate_key(this.state.keyLength, this.state.digits)\n\t\n\n\tconsole.log(this.state)\r\n}\nrefreshGame(){ \n\tif(this.state.buttonText == \"New Game\"){\n\t\tthis.state.buttonText = \"Next Round\";\n\t}\n\n\t\n\t\n\tthis.state.current_round +=1;\n\tcurrent_round += 1;\n\tif(current_round > rounds){\n\t\talert(\"You have won \" + this.state.wins + \" out of \" + this.state.num_of_rounds + \"!\");\n\t\tthis.state.current_round = 1\n\t\tthis.state.wins = 0\n\t\tthis.state.buttonText = \"New Game\"\n\t\twins = 0;\n\t\tcurrent_round = 1\n\t\t\n\t}\n\telse{\n\t\thideAnswers()\n\t\tthis.state.key = generate_key(this.state.keyLength, this.state.digits)\n\t\tthis.state.b = flipCoin()\n\t\tthis.state.c = \"\" \n\t\tthis.refs.m1.value = \"\"\n\t\tthis.refs.m2.value = \"\"\n\t\tthis.refs.kk.style.color = \"black\"\n\t\tthis.refs.kk.style.background = \"black\"\n\t\tthis.refs.bb.style.color = \"black\"\n\t\tthis.refs.bb.style.background = \"black\"\n\t}\n\t    \n}\n\nasync submitMessages(e){\n\n\tvar msg0 = this.state.msg0;\n\tvar msg1 = this.state.msg1;\n\tvar msg_list = [msg0, msg1]\n\tif(!this.isValidMessage(msg0) || !this.isValidMessage(msg1)){\n\t\tthis.state.warningText = \"Both messages must have lengths of \" + this.state.keyLength + \" and be \" + this.state.digits + \"-digit numbers \";\t\n\t\tawait this.setState({c: \"\"})\n\t\t\n\t\n\t}\n\telse{\n\t\tawait this.setState({ c: \"<br></br><b> Defender's Cipher Text: </b> \" + formatKey(perform_op(this.state.key, msg_list[this.state.b], this.state.op, this.state.digits)) + \" \" });\n\t\n\t\tconsole.log(this.state)\n\t\t\n\t}\n\t\n}\n\nisValidMessage(msg){\n\tvar digits;\n\t//TODO need more validating \n\tif(msg.length != this.state.keyLength)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (var i = 0; i < msg.length; i++) { \n\t\t\n\t\tdigits = \"\" + msg[i];\n\t\tif(digits.length > this.state.digits){\n\t\t\treturn false;\n\t\t}\n\t} \n\t\n\treturn true;\n}\nasync updateMessages(e){\n\t\tvar msg = e.target.value.split`,`.map(x=>+x)\n\t\tawait this.setState({[e.target.name]: e.target.value.split`,`.map(x=>+x)})\n\t\tif(!this.isValidMessage(msg))\n\t\t{\n\t\t\tthis.state.warningText = \"Both messages must have lengths of \" + this.state.keyLength + \" and be \" + this.state.digits + \"-digit numbers \"\n\t\t}\n\t\t\t\n\t\t\n\t\telse{\n\t\t\tthis.state.warningText = \"\"\n\t\t}\n\t\tconsole.log(this.isValidMessage(msg))\n\t\t\n}\n\nsubmitGuess(e){\n\t\t\n\t\talert(\"Your guess is: \" + this.state.guess)\n\t\tif(this.state.guess == this.state.b){\n\t\t\talert(\"You've guessed correctly, great work!\")\n\t\t\tthis.state.wins += 1\n\t\t}else{\n\t\t\talert(\"Incorrect guess. :(\")  \n\t\t}\n\t\tthis.refs.kk.style.color = \"black\"\n\t\tthis.refs.kk.style.background = \"white\"\n\t\t\n\t\tthis.refs.bb.style.color = \"black\"\n\t\tthis.refs.bb.style.background = \"white\"\n\t\tshowAnswers();\n\n\t\t\n }\n \n async changeGuess(e){\n\t \n\t //do some logic to check if guess valid\n\t await this.setState({guess : e.target.value})\n\t \n }\r\n componentWillMount() {\r\n\t \r\n\t this.setState(this.props.state)\r\n\t console.log(\"in gamepage\")\r\n\t\r\n\t\r\n\t \r\n\t var handleToUpdate = this.props.handleToUpdate;\r\n\t handleToUpdate(this.props.state)\r\n\t \r\n\t\r\n  }\r\n\r\n  \r\n  componentWillUnmount() {\r\n\r\n  }\r\n\t\trender(){\r\n\t\tvar keyLength;\n\t\tvar digits;\n\t\tvar op;\n\t\tvar carry;\n\t\tvar rounds;\n\t\t\n\t\t// Check scheme to see which rules we are dealing with \n\t\t switch(this.state.scheme){\n\t\t\t \tcase \"Scheme 1\":\n\t\t\t\t\tthis.state.keyLength = 2;\n\t\t\t\t\tthis.state.digits = 1;\n\t\t\t\t\tthis.state.op = \"+\";\n\t\t\t\t\tthis.state.carry = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Scheme 2\":\n\t\t\t\t\tthis.state.keyLength = 3;\n\t\t\t\t\tthis.state.digits = 1;\n\t\t\t\t\tthis.state.op = \"+\";\n\t\t\t\t\tthis.state.carry = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Scheme 3\":\n\t\t\t\t\tthis.state.keyLength = 5;\n\t\t\t\t\tthis.state.digits = 2;\n\t\t\t\t\tthis.state.op = \"+\";\n\t\t\t\t\tthis.state.carry = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Scheme 4\":\n\t\t\t\t\tkeyLength = 7;\n\t\t\t\t\tthis.state.keyLength = keyLength;\n\t\t\t\t\t\n\t\t\t\t\tdigits = 2;\n\t\t\t\t\tthis.state.digits = digits;\n\t\t\t\t\t\n\t\t\t\t\top = \"+\";\n\t\t\t\t\tthis.state.op = op;\n\t\t\t\t\t\n\t\t\t\t\tcarry = 0;\n\t\t\t\t\tthis.state.carry = carry;\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Custom Scheme\":\n\t\t\t\t\tkeyLength =  this.state.keyLength;\n\t\t\t\t\trounds = this.state.rounds;\n\t\t\t\t\tdigits = this.state.digits;\n\t\t\t\t\tcarry = this.state.carry;\n\t\t\t\t\top = this.state.op \n\t\t\t }\n\t\t\n\t\tkeyLength =  this.state.keyLength;\n\t\trounds = this.state.num_of_rounds;\n\t\tdigits = this.state.digits;\n\t\tcarry = this.state.carry;\n\t\top = this.state.op \n\t\t\r\n\t\tconsole.log(this.state)\r\n\t\n\t\t\r\n\t\tvar carryText;\n\t\t\n\t\tswitch(this.props.state.carry)\n\t\t{\n\t\t\tcase 0:\n\t\t\t\tcarryText = \" Yes for addition\"\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tcarryText = \" Carry ignored\"\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tvar ciphertext = this.state.c;\n\t\tvar\trulesText =  \"<b>Scheme: \" + this.state.scheme + \" </b><br/>\"\n\t\trulesText += \"<small><small>Number of Rounds: \" + rounds + \" <br/> \";\n\t\trulesText += \"Number of Digits in Keys/Messages: \" + digits + \" <br/> \";\n\t\trulesText += \"Number of Elements per Key/Message: \" + keyLength + \" <br/> \";\n\t\trulesText += \"Arithmetic Operation for Encryption Scheme: \" + op + \" <br/> \";\n\t\trulesText += \"Carry for Addition: \" + carryText + \" </small></small><br/> \";\r\n\t\treturn(\r\n\t\t\t\r\n\t\t <div >\r\n\t\t<br></br>\n\t\n\t\t\t\r\n\t\t<p><div class=\"Info\"  dangerouslySetInnerHTML ={{__html: rulesText}}/> </p><br></br>\r\n\t\t <body class=\"Game-Border\">\r\n\t\r\n\t\t<Container fluid><small>Current Round: {current_round} / {rounds} </small> <br/><small>Wins: {this.state.wins} </small><hr/>\r\n  <Row >\r\n    <Col xs={6}><b>Defender   </b>\r\n <p><hr/></p>\r\n <br></br><b> Coin Flip </b>\r\n <br></br><b> k = <span className=\"spoiler\" ref=\"kk\" id=\"k\"> {formatKey(this.state.key)} </span> </b>\r\n <br></br><b> b = <span className=\"spoiler\" ref=\"bb\" id=\"b\"> {this.state.b} </span></b>\n <br></br> \n <p> <div dangerouslySetInnerHTML ={{__html: this.state.c}}/> </p>\n \r\n\r\n    </Col>\r\n\r\n    <Col xs={6}><b>Attacker</b>  <p> <hr/> </p>\n\t\r\n      <br></br><b> Message 0: <input type =\"text\" ref= \"m1\" name=\"msg0\" onChange = {this.updateMessages}/> </b> <small> {formatKey(this.state.msg0) } </small>\r\n   <br></br><b> Message 1: <input type =\"text\"  ref= \"m2\" name=\"msg1\" onChange = {this.updateMessages} /> </b> <small> {formatKey(this.state.msg1) } </small><br></br>\n   \n   <p style={{color:'red'}}> <small> <div dangerouslySetInnerHTML ={{__html: this.state.warningText}}/> </small></p><br></br>\n   <br></br>\n     \n   <Button onClick ={this.submitMessages}> Submit messages to defender</Button>\r\n\r\n  <br></br><br />\n  <Form >\n   <Form.Group >\n    <b>Input your Guess Here: </b>\n    <Form.Control ref=\"blah\" name=\"guess\" id=\"guess-field\" type=\"text\"  placeholder=\"Choose wisely...\" onChange = {this.changeGuess} onKeyPress={(e) => {if (e.key === \"Enter\") {this.submitGuess(e)}}} />\n    <Button onClick = {this.submitGuess}>Submit your guess</Button>\n  </Form.Group>\n </Form>\r\n <Link to='/gamepage'>\r\n\t\t<Button onClick={this.refreshGame}> {this.state.buttonText} </Button>\r\n </Link>\r\n <Link to='/'>\r\n <Button style={{marginLeft:'20px'}}> Home </Button>\r\n </Link>\r\n\r\n    </Col>\r\n \r\n  </Row>\r\n\r\n</Container>\r\n</body>\r\n\t\t</div>\r\n\t\t);\r\n  }}\r\n\r\n\r\nclass Settings extends React.Component{\r\n\tconstructor(props){\r\n\tsuper(props);\r\n\t\r\n\tthis.handleChange = this.handleChange.bind(this) \r\n}\r\n\r\nasync handleChange(e){\r\n\t\t\r\n\t\tvar val = e.target.value\r\n\t\t//alert(\"first val \" + e.target.value)\r\n\t\t//this.setState(  {...this.state,[e.target.name]: val} )\n\t\tif(e.target.name === \"carry\"){\n\t\t\tif(e.target.checked){\n\t\t\t\tval = 0\n\t\t\t}\n\t\t\n\t\t\t\n\t\t\telse{\n\t\t\t\tval = 1\n\t\t\t}\n\t\t}\r\n\t\tawait this.setState({[e.target.name]: val})\r\n\t\t\tconsole.log(this.state)\r\n\t\tvar handleToUpdate = this.props.handleToUpdate;\r\n\t     \r\n\t\thandleToUpdate(this.state)\r\n\t\t\r\n\r\n\t\t\r\n }\r\n componentWillMount() {\r\n\t\r\n\t this.setState(this.props.state)\r\n\r\n\t var handleToUpdate = this.props.handleToUpdate;\r\n\t handleToUpdate(this.props.state)\r\n  }\r\n\r\n  \r\n  componentWillUnmount() {\r\n    document.body.classList.remove('page-not-found');\r\n  }\r\n\t\trender(){\r\n \r\n\r\n\t\t\r\n\t\treturn(\r\n\t\t<div>\r\n\t\t<h2> Settings </h2>\r\n\t\t<div class=\"container\">\r\n\r\n\r\n \r\n<div class=\"row\">\r\n  <Form>\r\n  <Form.Group >\r\n    <Form.Label>Enter number of digits for each number in key</Form.Label>\r\n\t\t<Form.Control  placeholder=\"2\" name = \"digits\"  onChange = {this.handleChange} />\r\n  \r\n  </Form.Group>\r\n  \r\n    <Form.Group >\r\n    <Form.Label>Enter in the length of the key</Form.Label>\r\n\t\t<Form.Control   placeholder=\"3\"  name = \"keyLength\"   onChange = {this.handleChange}/>\r\n\t\t<Form.Text> Example key: {formatKey(generate_key(this.state.keyLength, this.state.digits))} </Form.Text>\r\n  </Form.Group>\r\n  <Form.Group >\r\n  <br></br>\r\n    <Form.Label>Number of Rounds per Game</Form.Label>\r\n\t\t<Form.Control  placeholder=\"5\" name = \"num_of_rounds\"  onChange = {this.handleChange} />\r\n  \r\n  </Form.Group>\r\n \r\n</Form>\r\n\r\n  \r\n</div>\r\n\t<label>Select the arithmetic operator </label>\r\n    <select className=\"form-control\" name =\"op\" onChange = {this.handleChange}>\r\n          <option value=\"+\">+</option>\r\n          <option value=\"-\">-</option>\r\n          <option value=\"*\">*</option>\r\n        </select>\r\n <div class=\"row\">\r\n \r\n    \r\n  </div>\r\n  <br></br>\r\n    <div class=\"row\">\r\n    <div class=\"custom-control custom-switch\">\r\n        <input type=\"checkbox\" name = \"carry\" onChange = {this.handleChange} class=\"custom-control-input\" id=\"customSwitch2\" />\t\r\n        <label class=\"custom-control-label \" for=\"customSwitch2\"> Carry on addition?</label>\r\n\r\n    </div>\r\n\t\r\n    \r\n  </div>\r\n     <br></br>  \r\n  <div class=\"row\">\r\n\r\n    <Link to='/'>\r\n <Button> Home </Button>\r\n </Link>\r\n\r\n  </div>\r\n\r\n</div>\r\n\t\t\r\n\t\t\r\n\t\t</div>\r\n\t\r\n\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nclass Info extends React.Component{\r\n\r\n\r\n\t componentWillMount() {\r\n    document.body.classList.add('page-not-found')\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    document.body.classList.remove('page-not-found');\r\n  }\r\n\t\trender(){\r\n \r\n\t\t\r\n\t\treturn(\n\t\t\r\n\t<div class=\"Info\">\n\t\r\n\t\t\n\t\t<b>What is this game? </b><br></br>\n\n\n\n<small>It's simple. You play as the attacker who's attempting to determine the defender's key by sending two numerical messages of your choice. Note that in this game, messages and keys are formatted as n-tuple of integers.\n\n<br/><br/> <small>For example, a key can look like this k = (21,59,48,12,10) </small>\n\n<br/>\n\n<br/>\nAs your messages get send to the defender, the defender will then randomly select which of the two messages to encrpyt, and then send the ciphertext message back to you! Your goal is to correctly determine which message the defender had selected.\n\n<br/> By doing so, you'd then be able to do the selected encrpytion scheme operation backwards (decryption) and thus determine the <b>One-Time Pad</b>! :) </small>\n<br/><br/> <b> How to use the app?</b><br/>\n\t\t\t<small>One can start off with selecting one of the four preset schemes (similar to those from our CPSC 329 Tutorials). <br/>\n\t\t\tOr, you can define your very own <b>encrpytion scheme</b> by defining <br/>\n\t\t\t<ul><li> The artihmetic operator</li>\n\t\t\t<li>Number of digits per element</li>\n\t\t\t<li>Number of elements in a key/message (for our app both have to be the same length for now) </li>\n\t\t\t<li>A flag for enabling carry on addition </li>\n\t\t\t</ul>\n\t\t\t\n\t\t\t<br/> To select a custom theme first go Home>Encryption Scheme and select <b> Custom Scheme </b>.<br/> Then go to <b>Settings</b> and enter in your values. Once done head back home and then start game! \n\t\t\t\n\t\t\t\n<b><br/><br/>In Game Controls </b><br/>\n\nEnter in your two messages and ensure they are valid (number of digits and length). Then submit these to the defneder to reveal the encrpyted message and then have your crack at finding which message was selected! (0 or 1).\n\n</small>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass Home extends React.Component{\r\n\tconstructor(props){\r\n\tsuper(props);\r\n\tthis.state = this.props.state\r\n\tthis.onSelect = this.onSelect.bind(this) \r\n}\r\n\tasync onSelect(eventKey){\r\n\t\tselectedGame = eventKey \r\n\t\r\n\t\tawait this.setState({scheme: eventKey})\r\n\t\tvar handleToUpdate = this.props.handleToUpdate;\r\n\t     \r\n\t\thandleToUpdate(this.state)\r\n\t}\r\n\trender(){\r\n\t\tconst selection  = this.state;\r\nreturn (\r\n    <div className=\"App\">\r\n     <p style={{marginTop : '20px'}}> An interactive web app  on teaching how OTP works! </p>\r\n      <header className=\"App-header\">\r\n      \r\n\r\n     \t <Link to='/gamepage'>\r\n      \t<Button> Start Game </Button>\r\n\r\n\t\t</Link>\r\n\t\r\n\n\n\r\n\r\n  <p> Select your encrpytion scheme</p>\r\n      <Dropdown onSelect={this.onSelect}>\r\n  <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n{this.state.scheme}\r\n  </Dropdown.Toggle>\r\n\r\n\r\n  <Dropdown.Menu >\r\n    <Dropdown.Item eventKey = \"Scheme 1\">Scheme 1</Dropdown.Item>\r\n    <Dropdown.Item eventKey = \"Scheme 2\">Scheme 2</Dropdown.Item>\r\n\t<Dropdown.Item eventKey = \"Scheme 3\">Scheme 3</Dropdown.Item>\r\n\t<Dropdown.Item eventKey = \"Scheme 4\">Scheme 4</Dropdown.Item>\r\n    <Dropdown.Item eventKey = \"Custom Scheme\">Custom Scheme</Dropdown.Item>\r\n  </Dropdown.Menu>\r\n</Dropdown>\r\n\r\n <Link to='/settings'>\n\r\n      \t<Button> Game Settings </Button>\r\n\r\n\t\t</Link>\r\n\t\t <Link to='/info'>\r\n      \t<Button> Tutorial </Button>\r\n\r\n\t\t</Link>\r\n\t\t<Link to='/quiz'>\r\n\t\t<Button> OTP Quiz </Button>\r\n\t\t</Link>\r\n      </header>\r\n\n\r\n    \r\n      <small> Source Code: <a href=\"https://github.com/nmosman/Indistuingishability-Game\"> https://github.com/nmosman/Indistuingishability-Game</a> </small> \r\n    \r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n\r\nclass QuestionImage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.imgRef = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.imgRef.current && prevProps.img.src !== this.props.img.src) {\r\n      this.imgRef.current.classList.add('fade-in');\r\n\r\n      let timer = setTimeout(() => {\r\n        this.imgRef.current.classList.remove('fade-in');\r\n        clearTimeout(timer);\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <img ref={this.imgRef} className=\"img-fluid\" src={this.props.img.src} alt={this.props.img.alt} />\r\n    );\r\n  }\r\n}\r\n\r\nconst QuizProgress = (props) => {\r\n  return (\r\n    <div className=\"progress\">\r\n      <p className=\"counter\">\r\n        <span>Question {props.currentQuestion+1} of {props.questionLength}</span>\r\n      </p>\r\n      <div className=\"progress-bar\" style={{'width': ((props.currentQuestion+1) / props.questionLength) * 100 + '%'}}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Results = (props) => {\r\n  return (\r\n    <div className=\"results fade-in\">\r\n      <h1>Your score: {((props.correct/props.questionLength) * 100).toFixed()}%</h1>\r\n      <button type=\"button\" onClick={props.startOver}>Try again <i className=\"fas fa-redo\"></i></button>  <Link to='/'>\n <Button> Home </Button>\n </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Quiz extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.updateAnswer = this.updateAnswer.bind(this);\r\n    this.checkAnswer = this.checkAnswer.bind(this);\r\n    this.nextQuestion = this.nextQuestion.bind(this);\r\n    this.getResults = this.getResults.bind(this);\r\n    this.startOver = this.startOver.bind(this);\r\n\r\n    this.state = {\r\n      currentQuestion: 0,\r\n      correct: 0,\r\n      inProgress: true,\r\n      questions: [{\r\n        question: \"Which of the following provides an optimal strategy for the indistuingishability game\",\r\n        options: [{\r\n          option: \"Choosing two of the same messages\",\r\n          correct: true\r\n        }, {\r\n          option: \"Selectinmg two maximally unique messages\",\r\n          correct: false\r\n        }, {\r\n          option: \"Providing two random messages\",\r\n          correct: false\r\n        }],\r\n        img: {\r\n          src: '',\r\n          alt: ''\r\n        },\r\n        feedback: \"Selecting two maximally different messages is the optimal solution in this game. Try this strategy out when playing the game!\",\r\n        moreUrl: ''\r\n      }, {\r\n        question: \"What logical operator is typically used when encrpyting a One Time Pad with the plaintext?\",\r\n        options: [{\r\n          option: \"AND\",\r\n          correct: false \r\n        }, {\r\n          option: \"XOR\",\r\n          correct: true\r\n        }, {\r\n          option: \"NOR\",\r\n          correct: false\r\n        }],\r\n        img: {\r\n          src: '',\r\n          alt: ''\r\n        },\r\n        feedback: \"The bitwise XOR operator is used in OTP \",\r\n        moreUrl: \"\"\r\n      \r\n      },\n\t  {\n        question: \"What is a reason why OTP encryption is not very practical in security?\",\n        options: [{\n          option: \"The pad has to the be of the same length as the plaintext\",\n          correct: true\n        }, {\n          option: \"It's very complicated to implement\",\n          correct: false\n        }, {\n          option: \"It's very trivial to decrypt\",\n          correct: false\n        }],\n        img: {\n          src: '',\n          alt: ''\n        },\n        feedback: \"One reason is the pad must be the same length as the plaintext. Basically the length of the pad scales as the length of the plaintext grows.\",\n        moreUrl: ''\n      },\n\t  \n\t  \n\t  {\n        question: \"For perfect secrecy of OTP, whioh of the following must be true?\",\n        options: [{\n          option: \"The pad must be truly random\",\n          correct: true\n        }, {\n          option: \"Nobody should know how to encrypt the pad\",\n          correct: false\n        }, {\n          option: \"The pad can only be used at most 3 times\",\n          correct: false\n        }],\n        img: {\n          src: '',\n          alt: ''\n        },\n        feedback: \"Perfect secrecy assumes the pad generated is truly random. Also, the pad must only be used once!\",\n        moreUrl: ''\n      },\n\t  \n\t  \n\t  {\n        question: \"Who was first credited with coming up with the One Time Pad Encryption Scheme?\",\n        options: [{\n          option: \"Claude Shannon\",\n          correct: true\n        }, {\n          option: \"Gilbert Vernam\",\n          correct: true\n        }, {\n          option: \"John von Neumann\",\n          correct: false\n        }, {\n          option: \"Alan Turing\",\n          correct: false\n        }],\n        img: {\n          src: '',\n          alt: ''\n        },\n        feedback: \"Gilbert Vernam, an engineer at AT&T Bell labs, invtend the one time pad (OTP) in 1979\",\n        moreUrl: ''\n      },\n\t  \n\t  {\n        question: \"If given a key in binary as 1101 and a 4 bit plaintext as 0011, whats the encrypted cipher text. (Hint Enc(pad, m) = pad XOR m\",\n        options: [{\n          option: \"1110\",\n          correct: true\n        }, {\n          option: \"1101\",\n          correct: false\n        }, {\n          option: \"0011\",\n          correct: false\n        }],\n        img: {\n          src: '',\n          alt: ''\n        },\n        feedback: \"Recall that 1 XOR 1 is 0. Otherwise XOR is identical to adding numbers normally\",\n        moreUrl: ''\n      }\n\t  \n\t  ,\n\t  \n\t  {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n        question: \"If given a key in binary as 11001100 and a 8 bit plaintext as 10101010, whats the encrypted cipher text. (Hint Enc(pad, m) = pad XOR m\",\n        options: [{\n          option: \"11100100\",\n          correct: false\n        }, {\n          option: \"01100110\",\n          correct: true\n        }, {\n          option: \"10110011\",\n          correct: false\n        }],\n        img: {\n          src: '',\n          alt: ''\n        },\n        feedback: \"Recall that 1 XOR 1 is 0. Otherwise XOR is identical to adding numbers normally\",\n        moreUrl: ''\n      }\n\t  ]\r\n    }\r\n  }\r\n\r\n  updateAnswer(e) {\r\n    //record whether the question was answered correctly\r\n    let answerValue = e.target.value;\r\n\r\n    this.setState((prevState, props) => {\r\n      let stateToUpdate = prevState.questions;\r\n      //convert boolean string to boolean with JSON.parse()\r\n      stateToUpdate[prevState.currentQuestion].answerCorrect = JSON.parse(answerValue);\r\n\r\n      return {questions: stateToUpdate};\r\n    });\r\n  }\r\n\r\n  checkAnswer(e) {\r\n    //display to the user whether their answer is correct\r\n    this.setState((prevState, props) => {\r\n      let stateToUpdate = prevState.questions;\r\n      stateToUpdate[prevState.currentQuestion].checked = true;\r\n\r\n      return {questions: stateToUpdate};\r\n    });\r\n  }\r\n\r\n  nextQuestion(e) {\r\n    //advance to the next question\r\n    this.setState((prevState, props) => {\r\n      let stateToUpdate = prevState.currentQuestion;\r\n\r\n      return {currentQuestion: stateToUpdate+1};\r\n    }, () => {\r\n      this.radioRef.current.reset();\r\n    });\r\n  }\r\n\r\n  getResults() {\r\n    let correct = this.state.correct;\r\n\r\n    this.state.questions.forEach((item, index) => {\r\n      if (item.answerCorrect) {\r\n        ++correct;\r\n      }\r\n\r\n      if (index === (this.state.questions.length-1)) {\r\n        this.setState({\r\n          correct: correct,\r\n          inProgress: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  startOver() {\r\n    //reset form and state back to its original value\r\n    this.setState((prevState, props) => {\r\n      let questionsToUpdate = prevState.questions;\r\n\r\n      questionsToUpdate.forEach(item => {\r\n        //clear answers from previous state\r\n        delete item.answerCorrect;\r\n        delete item.checked;\r\n      });\r\n\r\n      return {\r\n        inProgress: true,\r\n        correct: 0,\r\n        currentQuestion: 0,\r\n        questions: questionsToUpdate\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.radioRef = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.inProgress) {\r\n      return (\r\n        <section className=\"quiz\">\r\n          <Results correct={this.state.correct} questionLength={this.state.questions.length} startOver={this.startOver} />\r\n        </section>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <section className=\"quiz fade-in\" aria-live=\"polite\">\r\n        <QuizProgress currentQuestion={this.state.currentQuestion} questionLength={this.state.questions.length} />\r\n        <div className=\"question-container\">\r\n          {this.state.questions[this.state.currentQuestion].img.src &&\r\n            <QuestionImage img={this.state.questions[this.state.currentQuestion].img} />\r\n          }\r\n          <p className=\"question\"><RawHTML html={this.state.questions[this.state.currentQuestion].question} /></p>\r\n\r\n          <form ref={this.radioRef}>\r\n            {this.state.questions[this.state.currentQuestion].options.map((item, index) => {\r\n              return <div key={index}\r\n                      className={\"option\" + (this.state.questions[this.state.currentQuestion].checked && !item.correct ? ' dim' : '') + (this.state.questions[this.state.currentQuestion].checked && item.correct ? ' correct' : '')}>\r\n                      <input id={\"radio-\"+index} onClick={this.updateAnswer} type=\"radio\" name=\"option\" value={item.correct}\r\n                          disabled={this.state.questions[this.state.currentQuestion].checked} />\r\n                        <label htmlFor={\"radio-\"+index}><RawHTML html={item.option}/></label>\r\n                    </div>\r\n              })}\r\n          </form>\r\n\r\n          <div className=\"bottom\">\r\n            {this.state.questions[this.state.currentQuestion].feedback && this.state.questions[this.state.currentQuestion].checked\r\n              && <div className=\"fade-in\">\r\n                <p>\r\n                  <RawHTML html={this.state.questions[this.state.currentQuestion].feedback} />\r\n                  {this.state.questions[this.state.currentQuestion].moreUrl &&\r\n                    <React.Fragment>\r\n                       &nbsp;<a target=\"_blank\" href={this.state.questions[this.state.currentQuestion].moreUrl}>Learn more</a>.\r\n                    </React.Fragment>\r\n                  }\r\n                </p>\r\n              </div>\r\n            }\r\n\r\n            {!this.state.questions[this.state.currentQuestion].checked &&\r\n               <button type=\"button\" onClick={this.checkAnswer}\r\n               disabled={!('answerCorrect' in this.state.questions[this.state.currentQuestion])}>Check answer</button>\r\n             }\r\n\r\n            {(this.state.currentQuestion+1) < this.state.questions.length && this.state.questions[this.state.currentQuestion].checked &&\r\n              <button className=\"fade-in next\" type=\"button\" onClick={this.nextQuestion}>Next <i className=\"fa fa-arrow-right\"></i></button>\r\n            }\r\n          </div>\r\n\r\n          {(this.state.currentQuestion+1) === this.state.questions.length && this.state.questions[this.state.currentQuestion].checked &&\r\n            <button type=\"button\" className=\"get-results pulse\" onClick={this.getResults}>Get Results</button>\r\n          }\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\nfunction generate_key(length, digits = 1){\r\n    var numbers = []\r\n    var i;\r\n    for(i = 0; i < length; i++){\r\n    \tnumbers.push(Math.floor(Math.random()*Math.pow(10,digits)))\r\n      console.log(numbers)\r\n    }\r\n  \r\n    return(numbers)\r\n}\r\n\r\n\r\nfunction formatKey(key){\r\n\tvar resString = \"(\"\r\n\t for(var i = 0; i < key.length; i++){\r\n\t  if(i == key.length - 1) \r\n\t  {\r\n\t\t  resString += key[i] + \")\"\r\n\t  }else{\r\n\t\t  resString += \"\" + key[i] + \",\"\r\n\t  }\r\n    }\r\n\treturn resString \r\n}\r\n\r\n\r\nfunction flipCoin(){\r\n\tvar res = Math.round(Math.random())\r\n\treturn res\r\n\t\r\n}\r\n\r\n// Perform encrpytion scheme based on given operation and carry flag \r\nfunction perform_op(key, message, op, carry = 0){\r\n  \r\n    var res = [];\r\n    var i; \r\n    for(i = 0; i < key.length; i++){\r\n     \r\n          if(op == \"+\"){\r\n         \r\n            var result = key[i] + message[i]\r\n\t\r\n            if(carry){\r\n                result = result % 10 \r\n            }\r\n            res.push(result)\r\n           }\r\n\t        else if(op == \"-\"){\r\n\t            result = key[i] - message[i]\r\n            \t\tif(carry){\r\n                \tresult = result % 10 \r\n                \t}\r\n            \tres.push(result)\r\n            }\r\n        \telse if(op == \"*\"){\r\n            \tresult = key[i] * message[i]\r\n            \tif(carry) {\r\n                \tresult = result % 10 \r\n            \t}\r\n            \tres.push(result)\r\n        \t}\r\n        \t\r\n        }\r\n    var resString = \"(\"\r\n    for(i = 0; i < key.length; i++){\r\n\t  if(i == key.length - 1) \r\n\t  {\r\n\t\t  resString += res[i] + \")\"\r\n\t  }else{\r\n\t\t  resString += \"\" + res[i] + \",\"\r\n\t\t\r\n\t  }\r\n\t}\r\n\r\n\t\r\n    return res \r\n  }\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}